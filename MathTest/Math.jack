// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array powers;

    /** Initializes the library. */
    function void init() {
        var int i, val;
        let powers = Array.new(15);
        let i = 0;
        let val = 1;
        let powers[i] = val;
        let i = 1;
        while (i < 15){
            let val = val + val;
            let powers[i] = val;
            let i = i + 1;
        }
        return;
    }

    function int get_2_2_i(int i){
        return powers[i];
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0){
            let x = -x;
        }
        return x;
    }

    /** Returns True iff x and y have the same sign, false otherwise. **/    
    function int get_sign(int x, int y){
        var int x;
        if ((x > 0) & (y > 0)){
            let x = 1;
        } else {
            let x = -1;
        }
        return x;
    }


    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shifted_x, i, sign;
        var boolean ith_bit;
        let sum = 0;
        if ((x = 0) | (y = 0)){
            return sum;
        }
        let shifted_x = x;
        let i = 0;
        let sign = Math.get_sign(x, y);
        let x = Math.abs(x);
        let y = Math.abs(y);
        while (i < 15) {
            let ith_bit = Math.bit(y, i);
            if (ith_bit){
                let sum = sum + shifted_x;
            }
            let shifted_x = shifted_x + shifted_x; 
            let i = i + 1;
        }
        if (sign < 0){
            let sum  = -sum;
        }
        return sum;
    }

    function int divide_pos(int x, int y) {
        var int q, temp;
        if ((y < 0) | (y > x)){
            return 0;
        }
        let q = Math.divide_pos(x, y + y);
        let temp = q * y;
        if ((x - (temp + temp)) < y){
            let q = q + q;
        } else {
            let q = q + q + 1;
        }
        return q;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, sign;
        if (y = 0){
            do Sys.error(3);
        }
        let sign = Math.get_sign(x, y);
        let x = Math.abs(x);
        let y = Math.abs(y);
        if (y > x){
            return 0;
        }
        let q = Math.divide_pos(x, y);
        if (sign < 0){
            let q = -q;
        }
        return q;
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, val, power_of;
        if (x < 0){
            do Sys.error(4);
        }
        let y = 0;
        let j = (x / 2) - 1;
        let power_of = 1;
        while (j > -1){
            let power_of = power_of * 2; 
            let j = j - 1;
        }
        while (j > -1){
            let val = y + power_of;
            let val = val * val;
            if (~(val > x) & (val > 0)){
                let y = val;
            }
            let power_of = power_of / 2;
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b){
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b){
            return a;
        }
        return b;
    }

    /** Returns true if the i-th bit of x is 1, false otherwise. */
    function boolean bit(int x, int i){
        return (powers[i] & x);
    }
}
