// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    
    field Array chars;
    field int length, chars_num;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength < 0){
            do Sys.error(14);
        }
        let length = maxLength;
        let chars_num = 0;
        if (maxLength > 0){
            let chars = Array.new(maxLength);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (length > 0){
            do chars.dispose();
        }
        do Memory.deAlloc(this);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return chars_num;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (~(j < chars_num)){
            do Sys.error(15);
        }
        return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (~(j < chars_num)) {
            do Sys.error(16);
        }
        let chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (chars_num = length) {
            do Sys.error(17);
        }
        let chars[chars_num] = c;
        let chars_num = chars_num + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (chars_num = 0) {
            do Sys.error(18);
        }
        let chars_num = chars_num - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int val, i, dig;
        var boolean neg;
        let val = 0;
        let i = 0;
        while (i < chars_num){
            if ((chars[i] < 48) | (chars[i] > 57)){
                let neg = false;
                if ((i = 0) & (chars[i] = 45)){
                    let neg = true;
                    let i = i + 1;
                } else {
                    let i = chars_num;
                }
            } else {
                let dig = chars[i] - 48;
                let val = (val * 10) + dig;
            }
            let i = i + 1;
        }
       if (neg){
            let val = -val;
        }
        return val;
    }

    method int get_int_length(int val){
        var int len;
        let len = 0;
        while (~(val = 0)){
            let val = val / 10;
            let len = len + 1;
        }
        return len;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int val_len, mod, diff, last_dig, c;
        var boolean neg;
        let val_len = get_int_length(val);
        if (val_len > length) {
            do Sys.error(19);
        }
        let chars_num = 0;
        if (val < 0){
            do appendChar(45);
            let val = -val;
        }
        let mod = val / 10;
        let diff = mod * 10;
        let last_dig = val - diff;
        let c = last_dig + 48;
        if (val < 10){
            do appendChar(c);
            return;
        }
        do appendChar(c);
        do setInt(val / 10);
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
